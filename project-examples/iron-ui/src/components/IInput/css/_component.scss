/**
 * Input
 */

@use '../../../css/icons';

.input-wrapper {
    display: block;
    vertical-align: middle;
    position: relative;
    flex-grow: 1;
    flex-shrink: 1;

    .input {
        position: relative;
        display: flex;
        flex: 1 0 auto;
        align-items: center;
        flex-direction: row;
        background-clip: padding-box;
        border-width: var(
            --input--border-width,
            var(--input--border-top-width, var(--border-top-width))
                var(--input--border-right-width, var(--border-right-width))
                var(--input--border-bottom-width, var(--border-bottom-width))
                var(--input--border-left-width, var(--border-left-width))
        );
        border-style: var(
            --input--border-style,
            var(--input--border-top-style, var(--border-top-style))
                var(--input--border-right-style, var(--border-right-style))
                var(--input--border-bottom-style, var(--border-bottom-style))
                var(--input--border-left-style, var(--border-left-style))
        );
        border-color: var(
            --input--border-color,
            var(--input--border-top-color, var(--border-top-color))
                var(--input--border-right-color, var(--border-right-color))
                var(--input--border-bottom-color, var(--border-bottom-color))
                var(--input--border-left-color, var(--border-left-color))
        );
        border-radius: var(
            --input--border-radius,
            var(--input--border-top-left-radius, var(--border-top-left-radius))
                var(--input--border-top-right-radius, var(--border-top-right-radius))
                var(--input--border-bottom-right-radius, var(--border-bottom-right-radius))
                var(--input--border-bottom-left-radius, var(--border-bottom-left-radius))
        );
        box-shadow: var(
            --input--box-shadow,
            var(--input--box-shadow-x-offset, var(--box-shadow-offset-x))
                var(--input--box-shadow-y-offset, var(--box-shadow-offset-y))
                var(--input--box-shadow-blur-radius, var(--box-shadow-blur-radius))
                var(--input--box-shadow-spread-radius, var(--box-shadow-spread-radius))
                var(--input--box-shadow-color, var(--box-shadow-color))
        );
        transition-property: var(
            --input--transition-property,
            background-color,
            color,
            border-color,
            box-shadow
        );
        transition-duration: var(--input--transition-duration, var(--transition-duration));
        transition-timing-function: var(
            --input--transition-timing-function,
            var(--transition-timing-function)
        );
        color: var(--input--color);
        background-color: var(--input--background);
        font-size: var(--input--font-size, var(--font-size));

        &:hover {
            border-color: var(--input--hover--border-color);
        }

        // Customize the `:focus` state to imitate native WebKit styles.
        &:focus-within {
            outline: 0;
            box-shadow: var(
                --input--box-shadow,
                var(--input--box-shadow-x-offset, var(--box-shadow-offset-x))
                    var(--input--box-shadow-y-offset, var(--box-shadow-offset-y))
                    var(--input--box-shadow-blur-radius, var(--box-shadow-blur-radius))
                    var(--input--box-shadow-spread-radius, var(--box-shadow-spread-radius))
                    var(--input--box-shadow-color, var(--box-shadow-color))
            );
            border-color: var(--input--focus--border-color);
        }

        > input,
        > select,
        > textarea {
            position: relative;
            flex: 1 0 auto;
            width: 1%;
            background: transparent;
            border: 0;
            margin: 0;
            outline: 0;
            line-height: var(--input--line-height, var(--line-height));
            color: var(--input--color);
            padding: var(
                --input--padding,
                var(--input--padding-top, var(--padding-top))
                    var(--input--padding-right, var(--padding-right))
                    var(--input--padding-bottom, var(--padding-bottom))
                    var(--input--padding-left, var(--padding-left))
            );

            // Remove style for the caret on `<select>`s in IE10+.
            &::-ms-expand {
                background-color: transparent;
                border: 0;
            }

            // Placeholder
            // Override Firefox's unusual default opacity see https://github.com/twbs/bootstrap/pull/11526.
            &::placeholder {
                opacity: 1;
                color: var(--input--placeholder--color);
            }

            // Disabled and read-only inputs
            //
            // HTML5 says that controls under a fieldset > legend:first-child won't be
            // disabled if the fieldset is disabled. Due to implementation difficulty, we
            // don't honor that edge case we style them as disabled anyway.
            &:disabled,
            &[readonly] {
                opacity: 1; // iOS fix for unreadable disabled content
                cursor: default;
            }

            /**
             * Select
             */
            &[readonly]:focus {
                outline: 0;
            }
        }

        .input-prefix,
        .input-suffix {
            display: inline-flex;
            align-items: center;
            z-index: 1;
            font-style: normal;
            transition-property: var(--input--transition-property, (border-color));
            transition-duration: var(--input--transition-duration, var(--transition-duration));
            transition-timing-function: var(
                --input--transition-timing-function,
                var(--transition-timing-function)
            );
            border-color: var(
                --input--border-color,
                var(--input--border-top-color, var(--border-top-color))
                    var(--input--border-right-color, var(--border-right-color))
                    var(--input--border-bottom-color, var(--border-bottom-color))
                    var(--input--border-left-color, var(--border-left-color))
            );
            color: var(--input--prefix-suffix--color);
            padding-right: var(
                --input--prefix-suffix--padding-right,
                var(--input--padding-right, var(--padding-right))
            );
            padding-left: var(
                --input--prefix-suffix--padding-left,
                var(--input--padding-left, var(--padding-left))
            );

            > button:not(.button):not(.select-caret) {
                background: transparent;
                border: 0;
                color: inherit;
            }
        }

        .input-prefix {
            border-right-width: var(
                --input--prefix--border-right-width,
                var(--input--border-right-width, var(--border-right-width))
            );
            border-right-style: var(
                --input--prefix--border-right-style,
                var(--input--border-right-style, var(--border-right-style))
            );
        }

        .input-suffix {
            border-left-width: var(
                --input--suffix--border-left-width,
                var(--input--border-left-width, var(--border-left-width))
            );
            border-left-style: var(
                --input--prefix--border-left-style,
                var(--input--border-left-style, var(--border-left-style))
            );
        }

        .input-clear {
            transition-property: var(--input--transition-property, background-color);
            transition-duration: var(--input--transition-duration, var(--transition-duration));
            transition-timing-function: var(
                --input--transition-timing-function,
                var(--transition-timing-function)
            );
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            width: var(--input--clear--size);
            height: var(--input--clear--size);
            border-radius: 100%;
            background-color: var(--input--clear--background);
            color: var(--input--clear--color);

            &:hover,
            &:focus {
                color: var(--input--clear--hover--color, var(--input--clear--color));
                background: var(--input--clear--hover--background, var(--input--clear--background));
            }

            &:active {
                background: var(
                    --input--clear--active--background,
                    var(--input--clear--background)
                );
            }

            &::before {
                background-color: var(--input--clear--color);
                content: '';
                mask-image: url('#{icons.$ink-times}');
                -webkit-mask-image: url('#{icons.$ink-times}');
                mask-position: center center;
                -webkit-mask-position: center center;
                mask-repeat: no-repeat;
                -webkit-mask-repeat: no-repeat;
                mask-size: 8px 8px;
                -webkit-mask-size: 8px 8px;
                height: 8px;
                width: 8px;
            }
        }
    }

    .input-prepend,
    .input-append {
        display: flex;
        flex-flow: row nowrap;
        align-items: stretch;
        padding: 0;
        line-height: var(--input-line-height, var(--line-height));
        transition-property: var(--input--transition-property, (background-color));
        transition-duration: var(--input--transition-duration, var(--transition-duration));
        transition-timing-function: var(
            --input--transition-timing-function,
            var(--transition-timing-function)
        );
        background-color: var(--input--prepend-append--background);
        font-size: var(--input--font-size, var(--font-size));

        > * {
            display: flex;
            flex: auto 1 0;
            align-self: stretch;
            align-items: center;
            border-radius: 0;
            padding-left: var(
                --input--prepend-append--padding-left,
                var(--input--padding-left, var(--padding-left))
            );
            padding-right: var(
                --input--prepend-append--padding-right,
                var(--input--padding-right, var(--padding-right))
            );
        }

        > [class$='-wrapper'] {
            padding-left: 0;
            padding-right: 0;

            > [class$='-trigger'] {
                display: flex;
                align-self: stretch;
            }
        }
    }

    .input-prepend,
    .input-prepend > *:first-child {
        border-top-left-radius: var(--input--border-top-left-radius, var(--border-top-left-radius));
        border-bottom-left-radius: var(
            --input--border-bottom-left-radius,
            var(--border-bottom-left-radius)
        );
    }

    .input-append,
    .input-append > *:last-child {
        border-top-right-radius: var(
            --input--border-top-right-radius,
            var(--border-top-right-radius)
        );
        border-bottom-right-radius: var(
            --input--border-bottom-right-radius,
            var(--border-bottom-right-radius)
        );
    }

    &.-prepended,
    &.-appended {
        display: flex;
        flex-wrap: nowrap;

        > .input {
            flex-shrink: 1;
        }
    }

    &.-prepended {
        > .input {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    &.-appended {
        > .input {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
    }

    &.-error {
        > .input {
            border-color: var(--input--error--border-color, var(--color-danger));
        }
    }

    &.-disabled,
    &.-readonly {
        > .input {
            color: var(--input--disabled--color, var(--input--color));
            background: var(--input--disabled--background, var(--input--background));

            &:hover {
                border-color: var(
                    --input--border-color,
                    (
                        var(--input--border-top-color, var(--border-top-color))
                            var(--input--border-right-color, var(--border-right-color))
                            var(--input--border-bottom-color, var(--border-bottom-color))
                            var(--input--border-left-color, var(--border-left-color))
                    )
                );
            }

            > input,
            > select,
            > textarea {
                &:disabled,
                &[readonly] {
                    color: var(--input--disabled--color);
                }
            }
        }
    }

    &.-readonly {
        > .input {
            &:focus-within {
                outline: 0;
                border-color: var(--input--focus--border-color);
            }
        }
    }
}
